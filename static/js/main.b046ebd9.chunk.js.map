{"version":3,"sources":["componets/Header.tsx","componets/Main.tsx","componets/Footer.tsx","componets/Card.tsx","componets/ToggleBtn.tsx","App.tsx","helpers/helpers.ts","hooks/useFetch.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","children","className","Main","Footer","Card","height","name","ToggleBtn","value","onToggle","label","onClick","prev","App","args","items","React","useState","onlyTall","setOnlyTall","filterText","setFilterText","url","options","cache","useRef","cancelRequest","initialState","error","undefined","data","useReducer","state","action","type","payload","dispatch","useEffect","a","current","fetch","response","ok","Error","statusText","json","fetchData","useFetch","filteredCharacters","results","filter","filters","every","combineFilters","item","toLowerCase","includes","parseInt","charactersHeights","map","averageHeight","sort","b","slice","reduce","acc","curr","length","placeholder","onChange","e","target","toFixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b046ebd9.chunk.js","sourcesContent":["import React from \"react\";\ntype HeaderProps = {\n  children?: React.ReactNode;\n};\nexport const Header = ({ children }: HeaderProps) => (\n  <header className=\"header\">\n    <div className={\"content-wrapper\"}>{children}</div>\n  </header>\n);\n","type MainProps = {\n  children: React.ReactNode;\n};\nexport const Main = ({ children }: MainProps) => {\n  return (\n    <main className={\"main\"}>\n      <div className={\"content-wrapper\"}>{children}</div>\n    </main>\n  );\n};\n","import React from \"react\";\ntype FooterProps = {\n  children?: React.ReactNode;\n};\nexport const Footer = ({ children }: FooterProps) => (\n  <footer className=\"footer\">\n    <div className={\"content-wrapper\"}>\n      <div className={\"box\"}>{children}</div>\n    </div>\n  </footer>\n);\n","type CardProps = {\n  name: string;\n  height: string;\n};\nexport const Card = ({ height, name }: CardProps) => (\n  <li className={`card`}>\n    <div className=\"card-body\">{height}</div>\n    <div className={\"card-footer\"}>{name}</div>\n  </li>\n);\n","import React from \"react\";\ntype ToggleProps = {\n  onToggle: React.Dispatch<React.SetStateAction<boolean>>;\n  value: boolean;\n  label: string;\n};\nexport const ToggleBtn = ({ value, onToggle, label }: ToggleProps) => {\n  return (\n    <label>\n      {label}\n      <button\n        className={`toggle ${value ? \"active\" : \"\"}`}\n        onClick={() => onToggle((prev) => !prev)}\n      >\n        <div className={\"toggle-knob\"} />\n      </button>\n    </label>\n  );\n};\n","import React from \"react\";\nimport \"./App.scss\";\nimport { Header } from \"./componets/Header\";\nimport { Main } from \"./componets/Main\";\nimport { Footer } from \"./componets/Footer\";\nimport { Card } from \"./componets/Card\";\nimport { useFetch } from \"./hooks/useFetch\";\nimport { ICharacter } from \"./types/character\";\nimport { ToggleBtn } from \"./componets/ToggleBtn\";\nimport {\n  combineFilters,\n  getAverage,\n  removeExtremeValues,\n} from \"./helpers/helpers\";\n\nfunction App() {\n  const [onlyTall, setOnlyTall] = React.useState(false);\n  const [filterText, setFilterText] = React.useState(\"\");\n  const { data, error } = useFetch<{ results: ICharacter[] }>(\n    \"https://swapi.dev/api/people/\"\n  );\n\n  const textFilter = (item: ICharacter) => {\n    return item.name.toLowerCase().includes(filterText.toLowerCase());\n  };\n  const tallFilter = ({ height }: ICharacter) => {\n    return onlyTall ? parseInt(height) > 100 : true;\n  };\n  const filteredCharacters =\n    data?.results?.filter(combineFilters(textFilter, tallFilter)) || [];\n\n  const charactersHeights = filteredCharacters.map(({ height }) =>\n    parseInt(height)\n  );\n  const averageHeight = getAverage(\n    removeExtremeValues(charactersHeights || [])\n  );\n  return (\n    <>\n      <Header>\n        <input\n          className={\"filter\"}\n          name={\"filter\"}\n          placeholder={\"Filter...\"}\n          value={filterText}\n          onChange={(e) => setFilterText(e.target.value)}\n        />\n      </Header>\n      <Main>\n        <ul className={\"list\"}>\n          {error && <div>Something went wrong</div>}\n          {filteredCharacters?.map(({ name, height }: ICharacter) => (\n            <Card key={name} name={name} height={height} />\n          ))}\n          {!data && <p className={\"loading\"}>Loading...</p>}\n        </ul>\n      </Main>\n      <Footer>\n        <ToggleBtn\n          onToggle={setOnlyTall}\n          value={onlyTall}\n          label={\"Include only tall\"}\n        />\n        <div>\n          Average Height:{\" \"}\n          <span className={\"height\"}>{averageHeight.toFixed(2)}</span>\n        </div>\n      </Footer>\n    </>\n  );\n}\n\nexport default App;\n","type Filter<T> = (item: T) => boolean;\nexport const combineFilters = <T>(...filters: Filter<T>[]): Filter<T> => {\n  return (value: T) => {\n    return filters.every((filter) => filter(value));\n  };\n};\nexport const getAverage = (args: number[]): number => {\n  return args.reduce((acc, curr) => acc + curr, 0) / args.length;\n};\nexport const removeExtremeValues = (items: number[]): number[] => {\n  return [...items].sort((a, b) => a - b).slice(1, -1);\n};\n","import { useEffect, useReducer, useRef } from \"react\";\n\ninterface State<T> {\n  data?: T;\n  error?: Error;\n}\n\ntype Cache<T> = { [url: string]: T };\n\ntype Action<T> =\n  | { type: \"loading\" }\n  | { type: \"fetched\"; payload: T }\n  | { type: \"error\"; payload: Error };\n\nexport function useFetch<T = unknown>(\n  url?: string,\n  options?: RequestInit\n): State<T> {\n  const cache = useRef<Cache<T>>({});\n\n  const cancelRequest = useRef<boolean>(false);\n\n  const initialState: State<T> = {\n    error: undefined,\n    data: undefined,\n  };\n\n  const fetchReducer = (state: State<T>, action: Action<T>): State<T> => {\n    switch (action.type) {\n      case \"loading\":\n        return { ...initialState };\n      case \"fetched\":\n        return { ...initialState, data: action.payload };\n      case \"error\":\n        return { ...initialState, error: action.payload };\n      default:\n        return state;\n    }\n  };\n\n  const [state, dispatch] = useReducer(fetchReducer, initialState);\n\n  useEffect(() => {\n    if (!url) return;\n\n    const fetchData = async () => {\n      dispatch({ type: \"loading\" });\n\n      if (cache.current[url]) {\n        dispatch({ type: \"fetched\", payload: cache.current[url] });\n        return;\n      }\n\n      try {\n        const response = await fetch(url, options);\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n\n        const data = (await response.json()) as T;\n        cache.current[url] = data;\n        if (cancelRequest.current) return;\n\n        dispatch({ type: \"fetched\", payload: data });\n      } catch (error) {\n        if (cancelRequest.current) return;\n\n        dispatch({ type: \"error\", payload: error as Error });\n      }\n    };\n\n    void fetchData();\n\n    return () => {\n      cancelRequest.current = true;\n    };\n  }, [url, options]);\n\n  return state;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}